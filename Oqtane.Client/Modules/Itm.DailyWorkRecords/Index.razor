@using Itm.DailyWorkRecords.Services
@using Itm.DailyWorkRecords.Models

@namespace Itm.DailyWorkRecords
@inherits ModuleBase
@inject IDailyWorkRecordService DailyWorkRecordService
@inject NavigationManager NavigationManager

@if (_DailyWorkRecords == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" Text="Add DailyWorkRecord" />
    <br />
    <br />
    @if (@_DailyWorkRecords.Count != 0)
    {
        <Pager Items="@_DailyWorkRecords" Format="Grid">
            <Header>
                <div class="col"><strong>DailyWorkRecords</strong></div>
            </Header>
            <Row>
                <div class="col">
                    <ActionLink Action="Edit" Parameters="@($"id=" + context.DailyWorkRecordId.ToString())" />
                    <ActionDialog Header="Delete DailyWorkRecord" Message="@("Are You Sure You Wish To Delete The " + context.Name + " DailyWorkRecord?")" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await Delete(context))" />
                    @context.Name
                </div>
            </Row>
        </Pager>
    }
    else
    {
        <p>No DailyWorkRecords To Display</p>
    }
}

<!-- The content below is for informational purposes only and can be safely removed -->

<hr />
DailyWorkRecord Module Created Successfully. Use Edit Mode To Add A DailyWorkRecord. You Can Access The Files At The Following Locations:<br /><br />
D:\dev\blazor\oqtane\src\sata\oqtane.framework\Oqtane.Client\Modules\DailyWorkRecord\<br />
- Edit.razor - component for adding or editing content<br />
- Index.razor - main component for your module **the content you are reading is in this file**<br />
- ModuleInfo.cs - implements IModule interface to provide configuration settings for your module<br />
- Settings.razor - component for managing module settings<br />
- Services\IDailyWorkRecordService.cs - interface for defining service API methods<br />
- Services\DailyWorkRecordService.cs - implements service API interface methods<br /><br />
D:\dev\blazor\oqtane\src\sata\oqtane.framework\Oqtane.Server\Modules\DailyWorkRecord\<br />
- Controllers\DailyWorkRecordController.cs - API methods implemented using a REST pattern<br />
- Manager\DailyWorkRecordManager.cs - implements optional module interfaces for features such as import/export of content<br />
- Repository\IDailyWorkRecordRepository.cs - interface for defining repository methods<br />
- Repository\DailyWorkRecordRespository.cs - implements repository interface methods for data access using EF Core<br />
- Repository\DailyWorkRecordContext.cs - provides a DB Context for data access<br />
- Scripts\Itm.DailyWorkRecords.1.0.0.sql - database schema definition script<br />
- Scripts\Itm.DailyWorkRecords.Uninstall.sql - database uninstall script<br /><br />
D:\dev\blazor\oqtane\src\sata\oqtane.framework\Oqtane.Shared\Modules\DailyWorkRecord\<br />
- Models\DailyWorkRecord.cs - model definition<br /><br />

<!-- The content above is for informational purposes only and can be safely removed -->

@code {
    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" }
    };

    List<DailyWorkRecord> _DailyWorkRecords;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _DailyWorkRecords = await DailyWorkRecordService.GetDailyWorkRecordsAsync(ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading DailyWorkRecord {Error}", ex.Message);
            AddModuleMessage("Error Loading DailyWorkRecord", MessageType.Error);
        }
    }

    private async Task Delete(DailyWorkRecord DailyWorkRecord)
    {
        try
        {
            await DailyWorkRecordService.DeleteDailyWorkRecordAsync(DailyWorkRecord.DailyWorkRecordId, ModuleState.ModuleId);
            await logger.LogInformation("DailyWorkRecord Deleted {DailyWorkRecord}", DailyWorkRecord);
            _DailyWorkRecords = await DailyWorkRecordService.GetDailyWorkRecordsAsync(ModuleState.ModuleId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting DailyWorkRecord {DailyWorkRecord} {Error}", DailyWorkRecord, ex.Message);
            AddModuleMessage("Error Deleting DailyWorkRecord", MessageType.Error);
        }
    }
}