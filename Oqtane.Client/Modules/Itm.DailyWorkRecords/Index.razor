@using Itm.DailyWorkRecords.Services
@using Itm.DailyWorkRecords.Models

@namespace Itm.DailyWorkRecords
@inherits ModuleBase
@inject IDailyWorkRecordService DailyWorkRecordService
@inject NavigationManager NavigationManager

@if (_DailyWorkRecords == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" Text="Add DailyWorkRecord" />
    <br />
    <br />
    @if (@_DailyWorkRecords.Count != 0)
    {
        <Pager Items="@_DailyWorkRecords" Format="Grid">
            <Header>
                <div class="col"><strong>DailyWorkRecords</strong></div>
            </Header>
            <Row>
                <div class="col">
                    <ActionLink Action="Edit" Parameters="@($"id=" + context.DailyWork.DailyWorkId.ToString())" />
                    <ActionDialog Header="Delete DailyWorkRecord" Message="@("Are You Sure You Wish To Delete The " + context.DailyWork.Date + " DailyWorkRecord?")" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await Delete(context))" />
                    @context.DailyWork.Date
                </div>
            </Row>
        </Pager>
    }
    else
    {
        <p>No DailyWorkRecords To Display</p>
    }
}

@code {
    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" }
    };

    List<DailyWorkRecord> _DailyWorkRecords;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _DailyWorkRecords = await DailyWorkRecordService.GetDailyWorkRecordsAsync(ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading DailyWorkRecord {Error}", ex.Message);
            AddModuleMessage("Error Loading DailyWorkRecord", MessageType.Error);
        }
    }

    private async Task Delete(DailyWorkRecord DailyWorkRecord)
    {
        try
        {
            await DailyWorkRecordService.DeleteDailyWorkRecordAsync(DailyWorkRecord.DailyWork.DailyWorkId, ModuleState.ModuleId);
            await logger.LogInformation("DailyWorkRecord Deleted {DailyWorkRecord}", DailyWorkRecord);
            _DailyWorkRecords = await DailyWorkRecordService.GetDailyWorkRecordsAsync(ModuleState.ModuleId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting DailyWorkRecord {DailyWorkRecord} {Error}", DailyWorkRecord, ex.Message);
            AddModuleMessage("Error Deleting DailyWorkRecord", MessageType.Error);
        }
    }
}